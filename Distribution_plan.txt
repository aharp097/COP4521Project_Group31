From what we could gather, Docker is a popular choice to pair with Django apps, and has a plethora of tutorials on YouTube as well as a lively forum which makes it more beginner-friendly than other options. I learned about Docker simply from browsing YouTube on the topic of containerization for Django applications. In addition to the rich learning resources, Docker plays nice with other machines due to instructions being contained within the Docker image, so transferring hosts is easier than with other solutions. To make an image, when we’re in the python environment for our project (venv), we need to run the command “pip freeze > requirements.txt”. This will generate a text file named “requirements.txt” that includes which packages and versions are necessary to run the Django app. After that, we need to pick which OS we are going to package and run the app on within the container (we would simply use Ubuntu, given its small size and the confirmation it runs well on there). Now, in our Dockerfile we need to write commands that Docker would need in order to set up and run our app. “FROM ubuntu:18.04” to set up the image, then run the commands to set up the necessary packages for our app. Because we have already grabbed our required packages into a .txt file, we can next run “WORKDIR /app
COPY requirements.txt requirements.txt
RUN pip3 install -r requirements.txt
COPY . .
CMD [“python”, “manage.py”, “uvicorn” “skechwime.asgi:application” “—host” “0.0.0.0” “--port 8000” “--log-level debug”]”
And now back in our own terminal, we run “docker build –tag skechwime .”, then we have our image. 
